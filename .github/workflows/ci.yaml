name: CI

on:
  push:
    branches:
      - "**"
  pull_request:
    branches:
      - "master"

env:
  CARGO_TERM_COLOR: always
  # Make sure CI fails on all warnings, including Clippy lints
  RUSTFLAGS: "-Dwarnings"
  LIBYANG_VERSION: "v3.12.2"
  SYSREPO_VERSION: "v3.6.11"

jobs:
  fmt:
    name: Code Formatting Check
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: dtolnay/rust-toolchain@stable
        with:
          components: rustfmt
      - uses: Swatinem/rust-cache@v2
      - name: "rustfmt --check"
        run: |
          if ! rustfmt --check --edition 2021 $(git ls-files '*.rs'); then
            printf "Please run \`rustfmt --edition 2021 \$(git ls-files '*.rs')\` to fix rustfmt errors.\nSee CONTRIBUTING.md for more details.\n" >&2
            exit 1
          fi

  tests_and_coverage_report:
    name: Tests and Coverage Report
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - uses: dtolnay/rust-toolchain@stable
        with:
          components: clippy

      - name: Install Rust
        run: rustup update stable

      - name: Checkout libyang repo
        uses: actions/checkout@v4
        with:
          repository: CESNET/libyang
          path: libyang
          ref: {{LIBYANG_VERSION}}
      - name: build libyang
        run: cd libyang; mkdir build; cd build; cmake -D CMAKE_BUILD_TYPE:String="Release" ..; make; sudo make install

      - name: Checkout sysrepo repo
        uses: actions/checkout@v4
        with:
          repository: sysrepo/sysrepo
          path: sysrepo
          ref: {{SYSREPO_VERSION}}
      - name: build sysrepo
        run: cd sysrepo; mkdir build; cd build; cmake -D CMAKE_BUILD_TYPE:String="Release" ..; make; sudo make install

      - name: Run Clippy
        run: cargo clippy

      - name: Install cargo-llvm-cov
        uses: taiki-e/install-action@cargo-llvm-cov
      - name: Generate code coverage
        run: cargo llvm-cov --codecov --output-path codecov.json
  #      - name: Upload to Codecov
  #        uses: codecov/codecov-action@v4
  #        if: github.event_name != 'pull_request'
  #        with:
  #          files: ./lcov.info
  #          fail_ci_if_error: false
  #          token: ${{ secrets.CODECOV_TOKEN }}

